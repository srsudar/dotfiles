set nocompatible

set t_Co=256

" ---------- plugins ---------

" setting up vundle
filetype off
set runtimepath+=~/.vim/bundle/vundle
call vundle#rc()

Bundle 'gmarik/vundle'

" search with ack
Bundle 'mileszs/ack.vim'
" some git integration and status info
Bundle 'tpope/vim-fugitive'
" file browser on the left
Bundle 'scrooloose/nerdtree'
" and make the nerdtree file browser consistent between tabs
Bundle 'jistr/vim-nerdtree-tabs'
" more python support
Bundle 'klen/python-mode'
" surround things with other things
Bundle 'tpope/vim-surround'
" syntax highlighting
Bundle 'scrooloose/syntastic'
" complementary mappings
Bundle 'tpope/vim-unimpaired'
" solarized
Bundle 'altercation/vim-colors-solarized'
" GO integration
Bundle 'fatih/vim-go'
" gradle integration
Bundle 'tfnico/vim-gradle'
" more sane regex
Bundle 'nelstrom/vim-visual-star-search'
" fuzzy search for files using ctrl+p
Plugin 'kien/ctrlp.vim'
" open alternate files (eg foo.h quick opens foo.c)
Plugin 'vim-scripts/a.vim'
" show git status of lines
Plugin 'airblade/vim-gitgutter'
" Smart align things like markdown tables
Plugin 'godlygeek/tabular'
" Use ctrl+h,j,k,l to navigate tmux and vim windows
Plugin 'christoomey/vim-tmux-navigator'
" Use github-flavored markdown highlighting, not canonical md highlighthing
Plugin 'jtratner/vim-flavored-markdown'
" Prettier status line.
Plugin 'bling/vim-airline'
" Commenting with gc{motion}
Plugin 'tpope/vim-commentary'
" Define custom text objects. Required for vim-textobj-entire
Plugin 'kana/vim-textobj-user'
" Add 'whole file' objects with ae and ie (ignores leading/trailing whitespace)
Plugin 'kana/vim-textobj-entire'
" Allow . repeating using vim-surround
Plugin 'tpope/vim-repeat'
" Smarter CTRL-A and CTRL-X for addition/subtraction
Plugin 'tpope/vim-speeddating'
" Auto-conversion to snake, camel, mixed, upper  case with crs, crc, crm, cru
Plugin 'tpope/vim-abolish'
" Allow smarter pasting.
Plugin 'svermeulen/vim-easyclip'
" Allowing yanking via yankstack
Plugin 'maxbrunsfeld/vim-yankstack'
" Word objects for columns of text
Plugin 'coderifous/textobj-word-column.vim'
" latex support
Plugin 'LaTeX-Box-Team/LaTeX-Box'
" Readline-style bindings in vim
Plugin 'tpope/vim-rsi'
" More information for <ctrl>+a character information, including unicode
Plugin 'tpope/vim-characterize'
" Fancy pants auto completion
Plugin 'valloric/YouCompleteMe'

" Use system clipboard for pasting and yanking.
set clipboard=unnamed
" Don't let easy clip overwrite the mark function.
" let g:EasyClipUseCutDefaults = 0
" Remap mark to gm, allowing easyclip to use m for move
nnoremap gm m
" Set paste by default when pasting from insert and command mode.
imap <c-v> <plug>EasyClipInsertModePaste
cmap <c-v> <plug>EasyClipCommandModePaste

" Let eclim and YouCompleteMe play nice.
let g:EclimCompletionMethod = 'omnifunc'

" LatexBox
" Open the quickfix window immediately if not empty, but don't steal focus
let g:LatexBox_quickfix = 2
" ]] to close the current environment
imap ]] <Plug>LatexCloseCurEnv

" Syntastic
let g:syntastic_mode_map={ 'mode':'active',
	\ 'active_filetypes': [],
	\ 'passive_filetypes': [] }
let g:syntastic_python_checkers = ['pep8', 'python', 'pyflakes']
" This tells syntastic to use the location list for displaying things.
let g:syntastic_auto_loc_list=1
" Ignore the things that yelp does. 
" TODO: Should probably only do this conditionally.
let g:syntastic_python_pep8_args='--ignore=E501,W191'
let g:syntastic_enable_highlighting = 1
let g:syntastic_enable_signs = 1
let g:syntastic_error_symbol = 'x'
let g:syntastic_warning_symbol = '!'
" And now we disable pyflakes using the quickfix list to leave the quickfix
" buffer alone, which does weird things to syntastic.
let g:pyflakes_use_quickfix = 0
let g:pymode_lint_write = 0

" Tagbar
let g:tagbar_sort = 0
let g:tagbar_compact = 1
let g:tagbar_autofocus = 1

" PythonMode
let g:pymode_folding = 0 " No auto code folding

" Ropevim
" if(filereadable(expand('~/.vim/plugin/ropevim.vim')))
" 	let ropevim_vim_completion=1 "Replace vim's complete function with ropevim
" 	let ropevim_extended_complete=1
" endif

" Don't move the cursor when you join lines with J
:nnoremap <silent> J :let p=getpos('.')<bar>join<bar>call setpos('.', p)<cr>

" Command-T
let g:CommandTMaxFiles=999999

" Airline
let g:airline_theme='murmur'
" Don't want to require patched font, so change separator.
let g:airline_left_sep = ''
let g:airline_right_sep = ''
" Turn off file type, which is useless. Keep tagbar and virtual env, like
" default
let g:airline_section_x = airline#section#create_right(['tagbar', 'virtualenv'])
" Turn off file type and file encoding
let g:airline_section_y = 0
" Turn off white space errors by default.
let g:airline#extensions#whitespace#enabled = 0

" ---------- settings ---------
" We'll use a highlight color column if it has it.
if exists('+colorcolumn')
	set colorcolumn=80
else
	au BufWinEnter * let w:m2=matchadd('ErrorMsg', '\%>80v.\+', -1)
endif

" <C-a> and <C-x> by default interpret leading-zero numbers as octal. I almost
" never work with octal, so this will make all numbers be interpreted as
" decimal.
set nrformats=

" The leader was mapped to comma, but his is the reverse find function of the
" ; command. I'm going to not map this and just leave leader the same with
" \. I think I'd prefer to use reverse find a lot than leader. But we'll see.
"let mapleader = ","
"noremap \ ,
set mouse=a

" Filetype highlighting
filetype on
filetype plugin indent on
syntax on

" Turn on the matchit plugin that will enable jumping to pairs of things like
" matching open and close xml tags with %.
runtime macros/matchit.vim

" Show what you are typing mid-command
set showcmd

" Indentation/tabs
set autoindent
"highlight TabHighlight ctermbg=Blue " highlight tabs
set listchars=tab:>-
set list

" 2 spaces by default
set tabstop=2
set softtabstop=2
set shiftwidth=2
set expandtab

" Except HTML - 2 spaces
autocmd BufWinEnter *.html setlocal tabstop=2
autocmd BufWinEnter *.html setlocal expandtab
autocmd BufWinEnter *.html setlocal shiftwidth=2
autocmd BufWinEnter *.html setlocal expandtab

" Treat all *.md files as markdown, not just README.md. Otherwise vim by
" default treats *.md files as modula-2: https://github.com/tpope/vim-markdown
augroup markdown
  au!
  au BufNewFile,BufRead *.md,*.markdown setlocal filetype=ghmarkdown
augroup END
"autocmd BufNewFile,BufReadPost *.md set filetype=markdown

" Tabs when editing a Makefile
" This doesn't seem to be working, at least on my yelp machine in the file
" ~/pg/geoviz_clientlib/Makefile. Maybe due to a setting down below?
" Can be avoided by remembering that <CTRL-V><TAB> will insert a tab
" character, as <CTRL-V> apparently inserts a literal version of the next
" character you enter.
"autocmd FileType make setlocal noexpandtab shiftwidth=4 softtabstop=0

" highlight trailing whitespace and non-tab indents
autocmd ColorScheme * highlight ExtraWhitespace ctermbg=red guibg=red
autocmd ColorScheme * highlight TabHighlight ctermbg=Blue
" So this doesn't work because you can only apply one match at a time. What I
" should really be doing is writing a custom syntax, apparently. See:
" http://stackoverflow.com/questions/18167443/multiple-highlight-with-autocmd-in-vimrc
autocmd BufWinEnter *.* match ExtraWhitespace /\s\+$/
autocmd BufWinEnter *.* match TabHighlight /\t/
autocmd BufWinLeave * call clearmatches()

" Color scheme and font
colorscheme xoria256-pluk
set guifont=Monaco:h12

" Highlight current line
set cursorline

" Statusline
set laststatus=2 " Show statusline even when there is a single window
set statusline=%F%m%r%h%w%{fugitive#statusline()}
set statusline+=[%l,%v][%p%%]

" Maintain more text around the cursor
set scrolloff=3

" Show line numbers
set number

" More intelligent backspace and left/right movement
set backspace=eol,start,indent
set whichwrap=b,s,h,l,<,>,[,]

" Wrap automatically at 79 chars.
" http://stackoverflow.com/questions/5602905/auto-wrap-long-lines-in-vim
" Why 79, you ask? In part because python pep recommends it:
" https://www.python.org/dev/peps/pep-0008/
" And in part because this way I never overlap my color column (which I set at
" 80, not 81), and I'm not yet ready to change it.
set wrap
set textwidth=79

" Hidden buffer support. I think this lets us navigate away from a buffer,
" even when doing ':bnext', without giving the 'override with !' error.
set hidden

" Disable annoying messages, swap file already exists
set autoread
set shortmess+=IA

" Longer history
set history=1000
" By default the up and down arrows filter commands in the history--eg if you
" type ':e ' and then hit up, you'll see only the previous commands that
" started with that. If you do that and then hit <C-p>, however, you won't. So
" let's fix that behavior.
cnoremap <C-p> <Up>
cnoremap <C-n> <Down>

" Case-smart searching (case-sensitive only if capital letter in search)
set ignorecase
set smartcase

" Incremental search
set incsearch

" And we're going to add commands that remap & to :&& in normal and visual
" modes. & normally reruns the substitution without the same flags, but this
" isn't super useful, so per the advice of Practical Vim I'm going to remap it
" to just redo the same thing.
nnoremap & :&&<CR>
xnoremap & :&&<CR>

" We're also going to add a toggle for highlighting search to c-l.
" According to Practical Vim, normally <C-l> clears and redraws the creen.
" This mapping builds on top of the usual behavior by muting search
" highlighting. FOR WHATEVER REASON THIS IS NOT WORKING
nnoremap <silent> <C-l> :<C-u>nohlsearch<CR><C-l>

" Tab completion
set wildmode=longest,list
set wildignore=*.pyc

" Visual bell instead of beep
set visualbell

" keep backups and temp files in ~.vim/
set backup
set backupdir=~/.vim/backup
set directory=~/.vim/tmp

" set default split opening position to be below and to the right of currently active split
set splitbelow
set splitright

" Tags - recursively check parent directories for tags file
set tags+=./.tags,.tags,../.tags,../../.tags

" Filetypes
autocmd BufEnter *.mako setlocal filetype=html

" Unicode stuff. This is taken from the following two places, both of which
" have good explanations:
" http://vim.wikia.com/wiki/Working_with_Unicode
" http://stackoverflow.com/questions/16507777/vim-set-encoding-and-fileencoding-utf-8
if has("multi_byte")
	if &termencoding == ""
		let &termencoding = &encoding
	endif
	set encoding=utf-8
	setglobal fileencoding=utf-8
	set fileencodings=ucs-bom,utf-8,latin1
endif

" This is a function from Practical Vim that executes something for every item
" in the argument list. It is also available as a plugin, with README
" information and things here (also see the books for usage):
" https://github.com/nelstrom/vim-qargs
command! -nargs=0 -bar Qargs execute 'args' QuickfixFilenames()
function! QuickfixFilenames()
  " Building a hash ensures we get each buffer only once
  let buffer_numbers = {}
  for quickfix_item in getqflist()
    let buffer_numbers[quickfix_item['bufnr']] = bufname(quickfix_item['bufnr'])
  endfor
  return join(map(values(buffer_numbers), 'fnameescape(v:val)'))
endfunction

" ---------- mappings ---------

" Make %% a shortcut for %:h on the command line. Normally if you do 
" ':edit %<Tab>' it will show you the relative path to the file, including the
" filename. If you don't want the filename, you do ':edit %:h<Tab>'. This
" remapping will give allow us to get the same functionality by doing
" ':edit %%'.
cnoremap <expr> %% getcmdtype() == ':' ? expand('%:h').'/' : '%%'

" Typos and things I don't want to do
nmap Q <ESC>
nmap :Q :q
nmap :W :w
nmap :WQ :wq

" Toggle fix quix and location list
function! GetBufferList()
  redir =>buflist
  silent! ls!
  redir END
  return buflist
endfunction

function! ToggleList(bufname, pfx)
  let buflist = GetBufferList()
  for bufnum in map(filter(split(buflist, '\n'), 'v:val =~ "'.a:bufname.'"'), 'str2nr(matchstr(v:val, "\\d\\+"))')
    if bufwinnr(bufnum) != -1
      exec(a:pfx.'close')
      return
    endif
  endfor
  if a:pfx == 'l' && len(getloclist(0)) == 0
      echohl ErrorMsg
      echo "Location List is Empty."
      return
  endif
  let winnr = winnr()
  exec(a:pfx.'open')
  if winnr() != winnr
    wincmd p
  endif
endfunction

" This is being funky and under sone circumstance the quickfix toggle is also
" opening the location list toggle. Annoying. Will wait to investigate more,
" might be something to do with Syntastic.
nmap <silent> <leader>l :call ToggleList("Location List", 'l')<CR>
nmap <silent> <leader>q :call ToggleList("Quickfix List", 'c')<CR>

" Took this from Adrian Sampson.
inoremap jk <ESC>

" Windows
"map <C-J> <C-W>j
"map <C-K> <C-W>k
"map <C-H> <C-W>h
"map <C-L> <C-W>l

" Function key shortcuts
map <F1> <nop>
map <F3> :set hlsearch! hlsearch?<CR>
map <F6> :NERDTreeClose<CR>
map <F7> :NERDTreeFind<CR> "TODO combine with F6 to make toggle
map <F8> :TagbarToggle<cr>
map <F9> :!/usr/bin/ctags -L <(find . -name '*.py') --fields=+iaS --python-kinds=-i --sort=yes --extra=+q<cr>

" Leader shortcuts
" open current buffer in new tab
map <Leader>s :tab split<CR>
map <Leader>n :tabnew<CR>
map <Leader>m :tabm
" map <Leader>l :lclose<CR>
" map <Leader>L :lopen<CR>
" map <Leader>c :copen<CR>
" map <Leader>C :cclose<CR>
" git diff in new tab
map <Leader>f :tab split<CR>:Gdiff canon/master<CR>
map <Leader>g :tab split<CR>:Ggrep 
map <Leader>i Oimport pdb; pdb.set_trace()<ESC>

" ---------- yelp stuff ---------

if(match(hostname(), 'dev20') >= 0)
	map <Leader>r :!cd ~/pg/yelp-main/templates && make && cd ~/pg/yelp-main/mobile_templates && make -f ../templates/Makefile<CR>
	set wildignore+=build/**,templates/*.py*,mobile_templates/*.py*,biz_templates/*.py*,admin_templates/*.py*,lite_templates/*.py*
	autocmd BufEnter *.css.tmpl setlocal filetype=css
	autocmd BufEnter *.js.tmpl setlocal filetype=javascript
endif

" This is to fix it up a bit to use PEP8 and 4 tabs, which apparently is what
" we're moving to at Yelp.
"function YelpPEP8Settings()
	"setlocal expandtab     " turn tabs into spaces
	"setlocal shiftwidth=4  " auto-indent width
	"setlocal tabstop=2     " If there is a tab, for now only make it 2 wide.
	"setlocal softtabstop=4 " We'll indent 4 for tabs.
"endfunction
"autocmd BufNewFile,BufRead * call YelpPEP8Settings()

" Remove the delay in ESC leaving a mode (ttimeoutlen)
set timeoutlen=1000 ttimeoutlen=0
