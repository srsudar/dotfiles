set nocompatible

set t_Co=256

" ---------- plugins ---------

execute pathogen#infect()

call pathogen#helptags() " generate helptags for everything in 'runtimepath'

" Syntastic
let g:syntastic_mode_map={ 'mode':'active',
	\ 'active_filetypes': [],
	\ 'passive_filetypes': [] }
let g:syntastic_python_checkers = ['pep8', 'python', 'pyflakes']
" This tells syntastic to use the location list for displaying things.
let g:syntastic_auto_loc_list=1
" Ignore the things that yelp does. 
" TODO: Should probably only do this conditionally.
let g:syntastic_python_pep8_args='--ignore=E501,W191'
let g:syntastic_enable_highlighting = 1
let g:syntastic_enable_signs = 1
let g:syntastic_error_symbol = 'x'
let g:syntastic_warning_symbol = '!'
" And now we disable pyflakes using the quickfix list to leave the quickfix
" buffer alone, which does weird things to syntastic.
let g:pyflakes_use_quickfix = 0
let g:pymode_lint_write = 0

" Tagbar
let g:tagbar_sort = 0
let g:tagbar_compact = 1
let g:tagbar_autofocus = 1

" PythonMode
let g:pymode_folding = 0 " No auto code folding

" Ropevim
if(filereadable(expand('~/.vim/plugin/ropevim.vim')))
	let ropevim_vim_completion=1 "Replace vim's complete function with ropevim
	let ropevim_extended_complete=1
endif

" Command-T
let g:CommandTMaxFiles=999999

" ---------- settings ---------
" We'll use a highlight color column if it has it.
if exists('+colorcolumn')
	set colorcolumn=80
else
	au BufWinEnter * let w:m2=matchadd('ErrorMsg', '\%>80v.\+', -1)
endif

" The leader was mapped to comma, but his is the reverse find function of the
" ; command. I'm going to not map this and just leave leader the same with
" \. I think I'd prefer to use reverse find a lot than leader. But we'll see.
"let mapleader = ","
"noremap \ ,
set mouse=a

" Filetype highlighting
filetype on
filetype plugin indent on
syntax on

" Show what you are typing mid-command
set showcmd

" Indentation/tabs
set autoindent
"highlight TabHighlight ctermbg=Blue " highlight tabs
set listchars=tab:>-
set list

" 2 spaces by default
set tabstop=2
set softtabstop=2
set shiftwidth=2

" Except HTML - 2 spaces
autocmd BufWinEnter *.html setlocal tabstop=2
autocmd BufWinEnter *.html setlocal expandtab
autocmd BufWinEnter *.html setlocal shiftwidth=2
autocmd BufWinEnter *.html setlocal expandtab

" Tabs when editing a Makefile
" This doesn't seem to be working, at least on my yelp machine in the file
" ~/pg/geoviz_clientlib/Makefile. Maybe due to a setting down below?
" Can be avoided by remembering that <CTRL-V><TAB> will insert a tab
" character, as <CTRL-V> apparently inserts a literal version of the next
" character you enter.
autocmd FileType make setlocal noexpandtab shiftwidth=4 softtabstop=0

" highlight trailing whitespace and non-tab indents
autocmd ColorScheme * highlight ExtraWhitespace ctermbg=red guibg=red
autocmd ColorScheme * highlight TabHighlight ctermbg=Blue
" So this doesn't work because you can only apply one match at a time. What I
" should really be doing is writing a custom syntax, apparently. See:
" http://stackoverflow.com/questions/18167443/multiple-highlight-with-autocmd-in-vimrc
autocmd BufWinEnter *.* match ExtraWhitespace /\s\+$/
autocmd BufWinEnter *.* match TabHighlight /\t/
autocmd BufWinLeave * call clearmatches()

" Color scheme and font
colorscheme xoria256-pluk
set guifont=Monaco:h12

" Highlight current line
set cursorline

" Statusline
set laststatus=2 " Show statusline even when there is a single window
set statusline=%F%m%r%h%w%{fugitive#statusline()}
set statusline+=[%l,%v][%p%%]

" Maintain more text around the cursor
set scrolloff=3

" Show line numbers
set number

" More intelligent backspace and left/right movement
set backspace=eol,start,indent
set whichwrap=b,s,h,l,<,>,[,]

" Hidden buffer support
set hidden

" Disable annoying messages, swap file already exists
set autoread
set shortmess+=IA

" Longer history
set history=1000
" By default the up and down arrows filter commands in the history--eg if you
" type ':e ' and then hit up, you'll see only the previous commands that
" started with that. If you do that and then hit <C-p>, however, you won't. So
" let's fix that behavior.
cnoremap <C-p> <Up>
cnoremap <C-n> <Down>

" Case-smart searching (case-sensitive only if capital letter in search)
set ignorecase
set smartcase

" Incremental search
set incsearch

" Tab completion
set wildmode=longest,list
set wildignore=*.pyc

" Visual bell instead of beep
set visualbell

" keep backups and temp files in ~.vim/
set backup
set backupdir=~/.vim/backup
set directory=~/.vim/tmp

" set default split opening position to be below and to the right of currently active split
set splitbelow
set splitright

" Tags - recursively check parent directories for tags file
set tags+=./.tags,.tags,../.tags,../../.tags

" Filetypes
autocmd BufEnter *.mako setlocal filetype=html

" Unicode stuff. This is taken from the following two places, both of which
" have good explanations:
" http://vim.wikia.com/wiki/Working_with_Unicode
" http://stackoverflow.com/questions/16507777/vim-set-encoding-and-fileencoding-utf-8
if has("multi_byte")
	if &termencoding == ""
		let &termencoding = &encoding
	endif
	set encoding=utf-8
	setglobal fileencoding=utf-8
	set fileencodings=ucs-bom,utf-8,latin1
endif
" ---------- mappings ---------

" Typos and things I don't want to do
nmap Q <ESC>
nmap :Q :q
nmap :W :w
nmap :WQ :wq

" Took this from Adrian Sampson.
inoremap jk <ESC>

" Windows
map <C-J> <C-W>j
map <C-K> <C-W>k
map <C-H> <C-W>h
map <C-L> <C-W>l

" Function key shortcuts
map <F1> <nop>
map <F3> :set hlsearch! hlsearch?<CR>
map <F6> :NERDTreeClose<CR>
map <F7> :NERDTreeFind<CR> "TODO combine with F6 to make toggle
map <F8> :TagbarToggle<cr>
map <F9> :!/usr/bin/ctags -L <(find . -name '*.py') --fields=+iaS --python-kinds=-i --sort=yes --extra=+q<cr>

" Leader shortcuts
map <Leader>v :tabe ~/.vimrc<CR>
map <Leader>e :tabe 
map <Leader>E :e <C-R>=expand('%:p:h') . '/'<CR>
" open current buffer in new tab
map <Leader>s :tab split<CR>
map <Leader>n :tabnew<CR>
map <Leader>Q :tabc<CR>
map <Leader>m :tabm
map <Leader>w :w<CR>
map <Leader>q :q<CR>
map <Leader>l :lclose<CR>
map <Leader>L :lopen<CR>
map <Leader>c :copen<CR>
map <Leader>C :cclose<CR>
map <Leader>z :cp<CR>
map <Leader>x :cn<CR>
" git diff in new tab
map <Leader>f :tab split<CR>:Gdiff canon/master<CR>
map <Leader>g :tab split<CR>:Ggrep 
" commit log for current file
map <Leader>o :Glog -- %<CR>:copen<CR>
map <Leader>i Oimport pdb; pdb.set_trace()<ESC>
map <Leader>I Oimport pudb; pudb.set_trace()<ESC>
" these are already set by Command-T, but let's be explicit
map <Leader>t :CommandT<CR>
map <Leader>b :CommandTBuffer<CR>

" ---------- yelp stuff ---------

if(match(hostname(), 'dev20') >= 0)
	map <Leader>r :!cd ~/pg/yelp-main/templates && make && cd ~/pg/yelp-main/mobile_templates && make -f ../templates/Makefile<CR>
	set wildignore+=build/**,templates/*.py*,mobile_templates/*.py*,biz_templates/*.py*,admin_templates/*.py*,lite_templates/*.py*
	autocmd BufEnter *.css.tmpl setlocal filetype=css
	autocmd BufEnter *.js.tmpl setlocal filetype=javascript
endif

" This is to fix it up a bit to use PEP8 and 4 tabs, which apparently is what
" we're moving to at Yelp.
function YelpPEP8Settings()
	setlocal expandtab     " turn tabs into spaces
	setlocal shiftwidth=4  " auto-indent width
	setlocal tabstop=2     " If there is a tab, for now only make it 2 wide.
	setlocal softtabstop=4 " We'll indent 4 for tabs.
endfunction
autocmd BufNewFile,BufRead * call YelpPEP8Settings()
