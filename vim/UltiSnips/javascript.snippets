snippet newt "Create a new failing Tape test" b
test('${1}', function(t) {
  t.fail();
  t.end();
});
endsnippet

snippet fend "Create an end function for tape tests" b
function end(t) {
  if (!t) { throw new Error('You forgot to pass tape'); }
  t.end();
  reset();
}
endsnippet

snippet descr "Create a describe block" b
describe('${1}', () => {
});
endsnippet

snippet it "Create a test" b
it('${1}', async () => {
  chai.assert.fail('', '', 'unimplemented');
});
endsnippet


snippet throwerr "Throw a new error"
throw new Error('${1:unimplemented}');
endsnippet

snippet retp "Return a new Promise"
return new Promise(function(resolve, reject) {
  ${1}
});
endsnippet

snippet deepeq "Tape deep equal"
t.deepEqual(actual, expected);
endsnippet

snippet then "Create then statement"
.then(${1:res} => {
  ${2:throw new Error('unimplemented');}
})
endsnippet

snippet catch "Create catch statement"
.catch(${1:err} => {
  ${2:throw new Error('unimplemented');}
})
endsnippet

snippet clog "console.log() something"
console.log(\`XXX ${1}\`);
endsnippet

snippet xxx "console.log() something"
console.log(\`XXX ${1}\`);
endsnippet

snippet xxxv "console.log() a variable"
console.log(\`XXX $1\`, ${1});
endsnippet

snippet newpt "Create a new failing Polymer test" b
test('${1}', () => {
  assert.fail("Unimplemented");
});
endsnippet

snippet eqp "Create an equals assertion for a Polymer test" b
expect(${1}).to.eql(${2});
endsnippet

snippet db "Add a debugger statement" b
// TODO: remove
debugger;
endsnippet

snippet timeout "Add a long timeout for superagent" b
// TODO: remove
.timeout({ response: 1_000_000_000, deadline: 1_000_000_000 })
endsnippet
