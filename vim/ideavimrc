" vim configuration for Intellij. See:
" https://www.jetbrains.com/help/idea/using-product-as-the-vim-editor.html#vimrc
set nocompatible

set t_Co=256

" Some taken here:
" https://github.com/w0ng/dotfiles/blob/master/.ideavimrc
set hlsearch      " Highlight search pattern results.
set showmode      " Show current mode on the last line.
set ignorecase    " Ignore case of normal letters in a pattern.
set smartcase     " Override ignorecase if pattern contains upper case.
set visualbell    " use visual bell instead of beeping
" Some fancy joining with J
" https://github.com/JetBrains/ideavim/wiki/%22ideajoin%22-examples
set ideajoin
set ideastatusicon

" Toggle git-blame window
nnoremap <leader>g :action Annotate<CR>

" ---------- plugins ---------
" I believe only these plugins are supported:
" https://github.com/JetBrains/ideavim/wiki/Emulated-plugins
Plug 'tpope/vim-surround'
Plug 'tpope/vim-commentary'
Plug 'kana/vim-textobj-entire'
Plug 'machakann/vim-highlightedyank'
Plug 'vim-matchit'

" let g:UltiSnipsListSnippets = '<c-tab>'
let g:UltiSnipsExpandTrigger="<tab>"
let g:UltiSnipsJumpForwardTrigger="<tab>"
let g:UltiSnipsJumpBackwardTrigger="<s-tab>"
let g:UltiSnipsSnippetsDir = "~/.vim/UltiSnips"

" Some useful mappings here:
" https://towardsdatascience.com/the-essential-ideavim-remaps-291d4cd3971b
nnoremap ]l :action GotoNextError<CR>
nnoremap [l :action GotoPreviousError<CR>
nnoremap ]b :action NextTab<CR>
nnoremap [b :action PreviousTab<CR>
" search LINES in ALL files (also search only in open files?)
nnoremap <Leader>l :action FindInPath<CR>
" search FILES
nnoremap <c-p> :action GotoFile<CR>
" search open tabs (and some other stuff)
nnoremap <Leader>b :action Switcher<CR>
" Close the little window at the bottom, eg the test window
nnoremap <c-c> :action HideActiveWindow<CR>
" Open the various tool windows, like debugger
nnoremap <c-n> :action ToolWindowGroup<CR>

" Rather than open empty splits, open with the existing file.
nnoremap <c-w>n :split<cr>
nnoremap <c-w>v :vsplit<cr>

" Color frontmatter in markdown files.
" let g:vim_markdown_math = 1
let g:markdown_enable_insert_mode_mappings = 0

" Delay the peekaboo register opening after hitting "
let g:peekaboo_delay = 1500

" Treat all *.md files as markdown, not just README.md. Otherwise vim by
" default treats *.md files as modula-2: https://github.com/tpope/vim-markdown
augroup markdown
  autocmd!
  autocmd BufNewFile,BufRead *.md,*.markdown setlocal filetype=markdown
  autocmd BufNewFile,BufRead *.md,*.markdown setlocal spell
  " Open table of contents with <leader>lt
  autocmd Filetype markdown map <buffer> <leader>lt :Toc<CR>
  " highlight bold
  autocmd FileType markdown highlight htmlBold ctermbg=60
  " View markdown in Marked 2 with <leader>lv. This is lo to mirror the view
  " functionality in my LaTeX plugin.
  autocmd FileType markdown map <buffer> <leader>lv :silent! !open -a Marked\ 2 % > /dev/null &<cr>:redraw!<cr>

  " gabrielelana/vim-markdown override textwidth to 0 for some reason, so re-set
  " it here to get back wrapping.
  autocmd Filetype markdown setlocal textwidth=80
augroup END

" Simulate easyclip plugin. From:
" https://stackoverflow.com/questions/39895146/how-do-i-get-the-easyclip-vim-plugin-like-functionality-in-ideavim-plugin-of-jet
nnoremap d "_d
xnoremap d "_d

nnoremap dd "_dd

nnoremap D "_D
xnoremap D "_D

nnoremap x "_x
xnoremap x "_x

nnoremap m d
nnoremap mm dd
xnoremap m d

" edit ideavimrc and reload
nnoremap \e :e ~/.ideavimrc<CR>
nnoremap \r :action IdeaVim.ReloadVimRc.reload<CR>

" Switch between windows in vim mode.
nnoremap <C-H> <C-W>h
nnoremap <C-L> <C-W>l
nnoremap <C-J> <C-W>j
nnoremap <C-K> <C-W>k

" Use one space instead of two when fixing up after sentences.
set nojoinspaces

" Don't move the cursor when you join lines with J
:nnoremap <silent> J :let p=getpos('.')<bar>join<bar>call setpos('.', p)<cr>

" Command-T
let g:CommandTMaxFiles=999999

" ---------- settings ---------
" We'll use a highlight color column if it has it.
if exists('+colorcolumn')
	set colorcolumn=81
else
	au BufWinEnter * let w:m2=matchadd('ErrorMsg', '\%>81v.\+', -1)
endif

" Change the color for better-whitespace plugin
let g:better_whitespace_ctermcolor='darkblue'
let g:better_whitespace_filetypes_blacklist=['diff', 'gitcommit', 'unite', 'qf', 'help']

" <C-a> and <C-x> by default interpret leading-zero numbers as octal. I almost
" never work with octal, so this will make all numbers be interpreted as
" decimal.
set nrformats=

set mouse=a

" Filetype highlighting
filetype on
filetype plugin indent on
syntax on

" Show what you are typing mid-command
set showcmd

" Indentation/tabs
set autoindent

" 2 spaces by default
set tabstop=2
set softtabstop=2
set shiftwidth=2
set expandtab

" Color scheme and font
colorscheme xoria256
" I like default xoria256, with a few modifications. Set those modifications
" here.
hi Comment      ctermfg=48 guifg=#808080
set guifont=Monaco:h12

" Highlight current line
set cursorline

" Maintain more text around the cursor
set scrolloff=3

set wrap
set textwidth=80

" Hidden buffer support. I think this lets us navigate away from a buffer,
" even when doing ':bnext', without giving the 'override with !' error.
set hidden

" Disable annoying messages, swap file already exists
set autoread
set shortmess+=IA

" Longer history
set history=10000
" By default the up and down arrows filter commands in the history--eg if you
" type ':e ' and then hit up, you'll see only the previous commands that
" started with that. If you do that and then hit <C-p>, however, you won't. So
" let's fix that behavior.
cnoremap <C-p> <Up>
cnoremap <C-n> <Down>

" Incremental search
set incsearch

" Tab completion
set wildmode=longest,list
set wildignore=*.pyc

" keep backups and temp files in ~.vim/
set backup
set backupdir=~/.vim/backup
set directory=~/.vim/tmp

" set default split opening position to be below and to the right of currently active split
set splitbelow
set splitright

" Tags - recursively check parent directories for tags file
set tags+=./.tags,.tags,../.tags,../../.tags

" Make warnings more noticeable, specially to not miss search wrap
hi WarningMsg ctermfg=white ctermbg=red guifg=White guibg=Red gui=None

" Make %% a shortcut for %:h on the command line. Normally if you do 
" ':edit %<Tab>' it will show you the relative path to the file, including the
" filename. If you don't want the filename, you do ':edit %:h<Tab>'. This
" remapping will give allow us to get the same functionality by doing
" ':edit %%'.
cnoremap <expr> %% getcmdtype() == ':' ? expand('%:h').'/' : '%%'

" Typos and things I don't want to do
nmap Q <ESC>
nmap :Q :q
nmap :W :w
nmap :WQ :wq

" Toggle fix quix and location list
function! GetBufferList()
  redir =>buflist
  silent! ls!
  redir END
  return buflist
endfunction

function! ToggleList(bufname, pfx)
  let buflist = GetBufferList()
  for bufnum in map(filter(split(buflist, '\n'), 'v:val =~ "'.a:bufname.'"'), 'str2nr(matchstr(v:val, "\\d\\+"))')
    if bufwinnr(bufnum) != -1
      exec(a:pfx.'close')
      return
    endif
  endfor
  if a:pfx == 'l' && len(getloclist(0)) == 0
      echohl ErrorMsg
      echo "Location List is Empty."
      return
  endif
  let winnr = winnr()
  exec(a:pfx.'open')
  if winnr() != winnr
    wincmd p
  endif
endfunction

" Remove the delay in ESC leaving a mode (ttimeoutlen)
set timeoutlen=1000 ttimeoutlen=0
