" vim configuration for Intellij. See:
" https://www.jetbrains.com/help/idea/using-product-as-the-vim-editor.html#vimrc
"
" 'Actions' are special Intellij mappings. You can see the live version by
" typing:
" :actionlist
"
" They are summarized here:
" https://gist.github.com/zchee/9c78f91cc5ad771c1f5d
set nocompatible

set t_Co=256

" Some taken here:
" https://github.com/w0ng/dotfiles/blob/master/.ideavimrc
set hlsearch      " Highlight search pattern results.
set showmode      " Show current mode on the last line.
set ignorecase    " Ignore case of normal letters in a pattern.
set smartcase     " Override ignorecase if pattern contains upper case.
set visualbell    " use visual bell instead of beeping
" Some fancy joining with J
" https://github.com/JetBrains/ideavim/wiki/%22ideajoin%22-examples
set ideajoin
set ideastatusicon

" Toggle git-blame window
nnoremap <leader>g :action Annotate<CR>
" Open the file in the github window with a permalink as from the `ght` sublink
" I like.
nnoremap ght :action Github.Open.In.Browser<CR>
vnoremap ght :action Github.Open.In.Browser<CR>

" Try and map normal YCM go to declaration.
nnoremap <leader>tg :action GotoDeclaration<CR>
" Stealing these from the coc.nvim mappings in the readme:
"   GoTo code navigation.
"   nmap <silent> gd <Plug>(coc-definition)
"   nmap <silent> gy <Plug>(coc-type-definition)
"   nmap <silent> gi <Plug>(coc-implementation)
"   nmap <silent> gr <Plug>(coc-references)
nnoremap gd :action GotoDeclaration<CR>
nnoremap gr :action FindUsages<CR>

# Wrap to column in ideavim. Need to install this plugin to work. Details:
# https://github.com/abrookins/WrapToColumn
nmap gq :action com.andrewbrookins.idea.wrap.WrapAction<CR>

vmap gw :action com.andrewbrookins.idea.wrap.WrapAction<CR>
nmap gwap :action com.andrewbrookins.idea.wrap.WrapParagraphAction<CR>

" ---------- plugins ---------
" I believe only these plugins are supported:
" https://github.com/JetBrains/ideavim/wiki/Emulated-plugins
Plug 'tpope/vim-surround'
Plug 'tpope/vim-commentary'
Plug 'kana/vim-textobj-entire'
Plug 'machakann/vim-highlightedyank'
Plug 'vim-matchit'

" Readline-style bindings in insert mode, stolen from:
" https://github.com/tpope/vim-rsi/blob/master/plugin/rsi.vim
inoremap        <C-A> <C-O>^
inoremap   <C-X><C-A> <C-A>
inoremap        <C-B> <Left>
inoremap        <C-D> <C-O>x
inoremap        <C-E> <C-O>$
inoremap        <C-F> <Right>

" Some useful mappings here:
" https://towardsdatascience.com/the-essential-ideavim-remaps-291d4cd3971b
nnoremap ]l :action GotoNextError<CR>
nnoremap [l :action GotoPreviousError<CR>
nnoremap ]d :action GotoNextError<CR>
nnoremap [d :action GotoPreviousError<CR>
" Show error popup when on error.
nnoremap <Leader>e :action ShowErrorDescription<CR>
nnoremap ]b :action NextTab<CR>
nnoremap [b :action PreviousTab<CR>
" search LINES in ALL files (also search only in open files?)
nnoremap <Leader>l :action FindInPath<CR>
" search FILES
nnoremap <c-p> :action GotoFile<CR>
" search open tabs (and some other stuff)
nnoremap <Leader>b :action Switcher<CR>
" Close the little window at the bottom, eg the test window
nnoremap <c-c> :action HideActiveWindow<CR>
" Open the various tool windows, like debugger
nnoremap <c-n> :action ToolWindowGroup<CR>

" Rather than open empty splits, open with the existing file.
nnoremap <c-w>n :split<cr>
nnoremap <c-w>v :vsplit<cr>

" The jump-list is kind of wonky by default. Instead we'll use :Back and
" :Forward, which appears to be more consistent.
" https://youtrack.jetbrains.com/issue/VIM-44
nmap <C-o> <Action>(Back)
nmap <C-i> <Action>(Forward)
" nnoremap <C-o> :action Back<CR>
" nnoremap <C-i> :action Forward<CR>

" Color frontmatter in markdown files.
" let g:vim_markdown_math = 1
let g:markdown_enable_insert_mode_mappings = 0

" Simulate easyclip plugin. From:
" https://stackoverflow.com/questions/39895146/how-do-i-get-the-easyclip-vim-plugin-like-functionality-in-ideavim-plugin-of-jet
nnoremap d "_d
xnoremap d "_d

nnoremap dd "_dd

nnoremap dD 0"_d$

nnoremap D "_D
xnoremap D "_D

nnoremap x "_x
xnoremap x "_x

" move instead of d
nnoremap m d
nnoremap mm dd
xnoremap m d
" and keep gm for marking
noremap gm m

nnoremap c "_c
xnoremap c "_c

nnoremap cc "_S
nnoremap C "_C
xnoremap C "_C
nnoremap s "_s
xnoremap s "_s
nnoremap S "_S
xnoremap S "_S

snoremap H <c-o>"_cH
snoremap I <c-o>"_cI
snoremap J <c-o>"_cJ
snoremap K <c-o>"_cK
snoremap L <c-o>"_cL
snoremap M <c-o>"_cM
snoremap N <c-o>"_cN
snoremap O <c-o>"_cO
snoremap P <c-o>"_cP
snoremap Q <c-o>"_cQ
snoremap R <c-o>"_cR
snoremap S <c-o>"_cS
snoremap T <c-o>"_cT
snoremap U <c-o>"_cU
snoremap V <c-o>"_cV
snoremap W <c-o>"_cW
snoremap X <c-o>"_cX
snoremap Y <c-o>"_cY
snoremap Z <c-o>"_cZ
snoremap [ <c-o>"_c[
snoremap \ <c-o>"_c\
snoremap ] <c-o>"_c]
snoremap ^ <c-o>"_c^
snoremap _ <c-o>"_c_
snoremap ` <c-o>"_c`
snoremap a <c-o>"_ca
snoremap b <c-o>"_cb
snoremap c <c-o>"_cc
snoremap d <c-o>"_cd
snoremap e <c-o>"_ce
snoremap f <c-o>"_cf
snoremap g <c-o>"_cg
snoremap h <c-o>"_ch
snoremap i <c-o>"_ci
snoremap j <c-o>"_cj
snoremap k <c-o>"_ck
snoremap l <c-o>"_cl
snoremap m <c-o>"_cm
snoremap n <c-o>"_cn
snoremap o <c-o>"_co
snoremap p <c-o>"_cp
snoremap q <c-o>"_cq
snoremap r <c-o>"_cr
snoremap s <c-o>"_cs
snoremap t <c-o>"_ct
snoremap u <c-o>"_cu
snoremap v <c-o>"_cv
snoremap w <c-o>"_cw
snoremap x <c-o>"_cx
snoremap y <c-o>"_cy
snoremap z <c-o>"_cz
snoremap { <c-o>"_c{
snoremap } <c-o>"_c}

snoremap <bs> <c-o>"_c
snoremap <space> <c-o>"_c<space>
snoremap \| <c-o>"_c|

" reload vimrc. Doesn't seem to work reliably...
nnoremap \r :action IdeaVim.ReloadVimRc.reload<CR>

" Switch between windows in vim mode.
nnoremap <C-H> <C-W>h
nnoremap <C-L> <C-W>l
nnoremap <C-J> <C-W>j
nnoremap <C-K> <C-W>k

" Use one space instead of two when fixing up after sentences.
set nojoinspaces

" Don't move the cursor when you join lines with J
:nnoremap <silent> J :let p=getpos('.')<bar>join<bar>call setpos('.', p)<cr>

" Command-T
let g:CommandTMaxFiles=999999

" ---------- settings ---------
" We'll use a highlight color column if it has it.
if exists('+colorcolumn')
	set colorcolumn=81
else
	au BufWinEnter * let w:m2=matchadd('ErrorMsg', '\%>81v.\+', -1)
endif

" Change the color for better-whitespace plugin
let g:better_whitespace_ctermcolor='darkblue'
let g:better_whitespace_filetypes_blacklist=['diff', 'gitcommit', 'unite', 'qf', 'help']

" <C-a> and <C-x> by default interpret leading-zero numbers as octal. I almost
" never work with octal, so this will make all numbers be interpreted as
" decimal.
set nrformats=

set mouse=a

" Filetype highlighting
filetype on
filetype plugin indent on
syntax on

" Show what you are typing mid-command
set showcmd

" Indentation/tabs
set autoindent

" 2 spaces by default
set tabstop=2
set softtabstop=2
set shiftwidth=2
set expandtab

" Color scheme and font
colorscheme xoria256
" I like default xoria256, with a few modifications. Set those modifications
" here.
hi Comment      ctermfg=48 guifg=#808080
set guifont=Monaco:h12

" Highlight current line
set cursorline

" Maintain more text around the cursor
set scrolloff=3

" set wrap
" set textwidth=80

" Hidden buffer support. I think this lets us navigate away from a buffer,
" even when doing ':bnext', without giving the 'override with !' error.
set hidden

" Disable annoying messages, swap file already exists
set autoread
set shortmess+=IA

" Longer history
set history=10000
" By default the up and down arrows filter commands in the history--eg if you
" type ':e ' and then hit up, you'll see only the previous commands that
" started with that. If you do that and then hit <C-p>, however, you won't. So
" let's fix that behavior.
cnoremap <C-p> <Up>
cnoremap <C-n> <Down>

" Incremental search
set incsearch

" Tab completion
set wildmode=longest,list
set wildignore=*.pyc

" keep backups and temp files in ~.vim/
set backup
set backupdir=~/.vim/backup
set directory=~/.vim/tmp

" set default split opening position to be below and to the right of currently active split
set splitbelow
set splitright

" Tags - recursively check parent directories for tags file
set tags+=./.tags,.tags,../.tags,../../.tags

" Make warnings more noticeable, specially to not miss search wrap
hi WarningMsg ctermfg=white ctermbg=red guifg=White guibg=Red gui=None

" Make %% a shortcut for %:h on the command line. Normally if you do 
" ':edit %<Tab>' it will show you the relative path to the file, including the
" filename. If you don't want the filename, you do ':edit %:h<Tab>'. This
" remapping will give allow us to get the same functionality by doing
" ':edit %%'.
cnoremap <expr> %% getcmdtype() == ':' ? expand('%:h').'/' : '%%'

" Typos and things I don't want to do
nmap Q <ESC>
nmap :Q :q
nmap :W :w
nmap :WQ :wq

" Toggle fix quix and location list
function! GetBufferList()
  redir =>buflist
  silent! ls!
  redir END
  return buflist
endfunction

function! ToggleList(bufname, pfx)
  let buflist = GetBufferList()
  for bufnum in map(filter(split(buflist, '\n'), 'v:val =~ "'.a:bufname.'"'), 'str2nr(matchstr(v:val, "\\d\\+"))')
    if bufwinnr(bufnum) != -1
      exec(a:pfx.'close')
      return
    endif
  endfor
  if a:pfx == 'l' && len(getloclist(0)) == 0
      echohl ErrorMsg
      echo "Location List is Empty."
      return
  endif
  let winnr = winnr()
  exec(a:pfx.'open')
  if winnr() != winnr
    wincmd p
  endif
endfunction

" Remove the delay in ESC leaving a mode (ttimeoutlen)
set timeoutlen=1000 ttimeoutlen=0
